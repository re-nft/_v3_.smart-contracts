// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.20;

import {IERC721Errors} from "@openzeppelin-contracts/interfaces/draft-IERC6093.sol";
import {
    Order,
    AdvancedOrder,
    FulfillmentComponent,
    CriteriaResolver
} from "@seaport-types/lib/ConsiderationStructs.sol";
import {ZoneParameters} from "@seaport-core/lib/rental/ConsiderationStructs.sol";

import {ZoneInterface} from "@src/interfaces/IZone.sol";
import {OrderType, OrderMetadata, RentalOrder} from "@src/libraries/RentalStructs.sol";

import {BaseTest} from "@test/BaseTest.sol";
import {SafeUtils} from "@test/utils/GnosisSafeUtils.sol";

// Demonstrates that the rental creation will always revert if there arent enough
// tokens to transfer in the order.
contract BypassInvariantChecks_PreventedExploits_Integration_Test is BaseTest {
    function test_BypassInvariantChecks_Exploit() public {
        // create a legit PAY order
        createOrder({
            offerer: alice,
            orderType: OrderType.PAY,
            erc721Offers: 1,
            erc1155Offers: 0,
            erc20Offers: 1,
            erc721Considerations: 0,
            erc1155Considerations: 0,
            erc20Considerations: 0
        });

        // finalize the pay order creation
        (
            Order memory payOrder,
            bytes32 payOrderHash,
            OrderMetadata memory payOrderMetadata
        ) = finalizeOrder();

        // create an order fulfillment for the pay order
        createOrderFulfillment({
            _fulfiller: alice,
            order: payOrder,
            orderHash: payOrderHash,
            metadata: payOrderMetadata
        });

        // create a malicious PAYEE order.
        createOrder({
            offerer: alice,
            orderType: OrderType.PAYEE,
            erc721Offers: 0,
            erc1155Offers: 0,
            erc20Offers: 0,
            erc721Considerations: 1,
            erc1155Considerations: 0,
            erc20Considerations: 1
        });

        // Set the ERC721 and ERC20 recipients as Alice herself
        orderToCreate.considerationItems[0].recipient = payable(alice.addr);
        orderToCreate.considerationItems[1].recipient = payable(alice.addr);

        // finalize the pay order creation
        (
            Order memory payeeOrder,
            bytes32 payeeOrderHash,
            OrderMetadata memory payeeOrderMetadata
        ) = finalizeOrder();

        // create an order fulfillment for the payee order
        createOrderFulfillment({
            _fulfiller: alice,
            order: payeeOrder,
            orderHash: payeeOrderHash,
            metadata: payeeOrderMetadata
        });

        // add an amendment to include the seaport fulfillment structs
        withLinkedPayAndPayeeOrders({payOrderIndex: 0, payeeOrderIndex: 1});

        // Expect revert because the create policy was never given any assets from alice.
        finalizePayOrderFulfillmentWithError(
            abi.encodeWithSelector(
                IERC721Errors.ERC721InsufficientApproval.selector,
                address(create),
                0
            )
        );
    }
}
