// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.20;

import {
    Order,
    OrderParameters,
    OfferItem,
    ConsiderationItem,
    FulfillmentComponent,
    Fulfillment,
    ItemType as SeaportItemType
} from "@seaport-types/lib/ConsiderationStructs.sol";
import {OfferItemLib, ConsiderationItemLib} from "@seaport-sol/SeaportSol.sol";

import {Errors} from "@src/libraries/Errors.sol";
import {
    OrderType,
    OrderMetadata,
    RentalOrder,
    Hook
} from "@src/libraries/RentalStructs.sol";

import {BaseTest} from "@test/BaseTest.sol";
import {SafeUtils} from "@test/utils/GnosisSafeUtils.sol";

// Demonstrates that a fulfiller cannot add a series of whitelisted tokens to an order
// as a consideration tip that would make stopping the rental exceedingly costly.
contract SeaportTipDOS_PreventedExploits_Integration_Test is BaseTest {
    using ConsiderationItemLib for ConsiderationItem;

    function test_SeaportTipDOS_Exploit() public {
        // create a BASE order
        createOrder({
            offerer: alice,
            orderType: OrderType.BASE,
            erc721Offers: 1,
            erc1155Offers: 0,
            erc20Offers: 0,
            erc721Considerations: 0,
            erc1155Considerations: 0,
            erc20Considerations: 1
        });

        // finalize the order creation
        (
            Order memory order,
            bytes32 orderHash,
            OrderMetadata memory metadata
        ) = finalizeOrder();

        // create an order fulfillment
        createOrderFulfillment({
            _fulfiller: bob,
            order: order,
            orderHash: orderHash,
            metadata: metadata
        });

        // mint erc20 tokens to the fulfiller to use as consideration item tips
        erc20s[0].mint(bob.addr, 100);

        // Add 100 consideration item tips to an order that has already been signed
        OrderParameters storage params = ordersToFulfill[0].advancedOrder.parameters;
        for (uint256 i; i < 100; ++i) {
            params.consideration.push(
                ConsiderationItemLib
                    .empty()
                    .withItemType(SeaportItemType.ERC20)
                    .withToken(address(erc20s[0]))
                    .withIdentifierOrCriteria(0)
                    .withStartAmount(1)
                    .withEndAmount(1)
                    .withRecipient(address(create))
            );
        }

        // Expect revert because the order exceeds the maximum amount of consideration
        // items allowed
        finalizeBaseOrderFulfillmentWithError(
            abi.encodeWithSelector(
                Errors.CreatePolicy_ConsiderationCountExceedsMax.selector,
                101
            )
        );
    }
}
