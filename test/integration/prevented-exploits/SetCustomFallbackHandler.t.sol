// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.20;

import {FallbackManager} from "@safe-contracts/base/FallbackManager.sol";

import {Errors} from "@src/libraries/Errors.sol";

import {BaseTest} from "@test/BaseTest.sol";
import {SafeUtils} from "@test/utils/GnosisSafeUtils.sol";

// Demonstrates that the owner of a safe can no longer set a custom fallback manager
// on their safe.
contract SetCustomFallbackHandler_PreventedExploits_Integration_Test is BaseTest {
    function test_SetFallbackHandler_Exploit() public {
        // Impersonate the attacker
        vm.startPrank(alice.addr);

        // create the `setFallbackHandler` calldata
        bytes memory setFallbackHandlerCalldata = abi.encodeWithSelector(
            FallbackManager.setFallbackHandler.selector,
            address(this) // use address this as an example
        );

        // Sign the calldata
        bytes memory transactionSignature = SafeUtils.signTransaction(
            address(alice.safe),
            alice.privateKey,
            address(alice.safe),
            setFallbackHandlerCalldata
        );

        // Expect the transaction to revert
        SafeUtils.executeTransactionWithError(
            address(alice.safe),
            address(alice.safe),
            setFallbackHandlerCalldata,
            transactionSignature,
            abi.encodeWithSelector(
                Errors.GuardPolicy_UnauthorizedSelector.selector,
                FallbackManager.setFallbackHandler.selector
            )
        );
    }
}
